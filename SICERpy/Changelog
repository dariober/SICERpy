
03/20/2011
	Reformulated the SICER and SICER-rb interface so that SICER-df.sh (SICER-df-rb.sh) can directly call SICER.sh (SICER-rb.sh)
	Now the master pipeline include the generation of wig files for before and after island-filtering, as well as the island-filtered read library. 

11/9/2010:
	Modified make_graph_file to take into consideration the chromosome length 
	Modified associate_tags_with_chip_and_control_w_fc_q.py to calculate FDR more efficiently
	Modified master scripts to produce wig file directly.


06/09/2010:
	Added version info (1.1) and copyright info in all modules and scripts.


06/08/2010:
	1) Updated find_overlapped_islands.py
	2) Updated associate_tags_with_chip_and_control_w_fc_q.py
	3) Replaced remove_multiple_identical_tags.py with remove_redundant_reads.py to reduce memory usage
	4) Added find_union_islands.py
	5) Added fragment-size-estimation.sh in utility
		In order to run, added module calculate_cross_correlation_long_range.py in utility
	6) Added SICER-df.sh SICER-df-rb.sh for identifying differentially enriched islands between two ChIP-seq libraries
		Edited README accordingly


06/06/2010:
	1)Modified master shell scripts to make them more robust
		TEMP=$[$3 % $2] 
		to
		TEMP=`expr $3 % $2`
	2)Added Arabidopsis Genome to GenomeData.py
	3)The default value for E value is changed from 10000 to 1000 in running SICER.sh. 



1/19/2010:modified filter_summary_graph.py
	
To fix this I changed the lines in  filter_summary_graphs.py

	assert( is_bed_sorted(islands_list) == 1 );
	assert( is_bed_sorted(all_windows_list) == 1 );

to

	assert( Utility.is_bed_sorted(islands_list) == 1 );
	assert( Utility.is_bed_sorted(all_windows_list) == 1 );




10/06/2009: modified find_islands_in_pr.py line 434:
	original:
	if len(filtered_bed_val[chrom])>0:
				islands = find_region(filtered_bed_val, chrom, opt.gap, opt.window_size, 10);
				islands = find_region_above_threshold(islands, score_threshold);
				total_number_islands += len(islands);
				
	for i in islands:
		outline = chrom + "\t" + str(i.start) + "\t" + str(i.end) + "\t" + str(i.value) + "\n";	
		outputfile.write(outline);
	



	if len(filtered_bed_val[chrom])>0:
				islands = find_region(filtered_bed_val, chrom, opt.gap, opt.window_size, 10);
				islands = find_region_above_threshold(islands, score_threshold);
				total_number_islands += len(islands);
				if len(islands)>0:
					for i in islands:
						outline = chrom + "\t" + str(i.start) + "\t" + str(i.end) + "\t" + str(i.value) + "\n";	
						outputfile.write(outline);
				else:
					print "\t", chrom, "does not have island";
